" As per 'XDG Base Directory' ArchLinux Wiki
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')
set viminfofile=$XDG_STATE_HOME/vim/viminfo

" Basic stuff
set encoding=utf-8
set nocompatible

filetype on
filetype plugin on
filetype indent on

syntax on
set number

set shiftwidth=2
set tabstop=2
set expandtab

set backup
set writebackup
set swapfile

set scrolloff=10
set nowrap

set incsearch
set ignorecase

set smartcase
set showcmd
set showmode
set showmatch
set hlsearch

set history=1000
set undolevels=1000

set wildmenu
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,.git,*.DS_Store

set title
set lazyredraw
set report=0
set cursorline

set nolist
if has("multi_byte")
  set listchars=eol:¬,tab:▸\ ,trail:⌴
else
  set listchars=eol:$,tab:>\ ,trail:.
endif

nnoremap <silent> <leader>l :set list! list?<CR>

set noerrorbells
set visualbell t_vb=
set mousehide

if has("statusline")

  function! StatusLineUTF8()
    try
      let p = getpos('.')
      redir => utf8seq
      sil normal! g8
      redir End
      call setpos('.', p)
      return substitute(matchstr(utf8seq, '\x\+ .*\x'), '\<\x\x', '0x\U&', 'g')
    catch
      return '?'
    endtry
  endfunction

  function! StatusLineFileEncoding()
    return has("multi_byte") && strlen(&fenc) ? &fenc : ''
  endfunction

  function! StatusLineUTF8Bomb()
    return has("multi_byte") && &fenc == 'utf-8' && &bomb?'+bomb' : ''
  endfunction

  function! StatusLineCWD()
    let l:pwd = exists('$PWD') ? $PWD : getcwd()
    return substitute(fnamemodify(l:pwd, ':~'), '\(\~\?/[^/]*/\).*\(/.\{20\}\)', '\1...\2', '')
  endfunction

  set laststatus=2  " always show a status line
  " set exact status line format
  set statusline=
  set statusline+=%#Number#
  set statusline+=❐\ %02n
  set statusline+=\ \|\
  set statusline+=%*
  set statusline+=%#Identifier#
  set statusline+=%f
  set statusline+=%*
  set statusline+=%#Special#
  set statusline+=%m
  set statusline+=%#Statement#
  set statusline+=%r
  set statusline+=%h
  set statusline+=%w
  set statusline+=%#Type#
  set statusline+=[%{&ff}]
  set statusline+=[
  set statusline+=%{StatusLineFileEncoding()}
  set statusline+=%#Error#
  set statusline+=%{StatusLineUTF8Bomb()}
  set statusline+=%#Type#
  set statusline+=]
  set statusline+=%y
  set statusline+=\ \|\
  set statusline+=%*
  set statusline+=%#Directory#
  set statusline+=%{StatusLineCWD()}
  set statusline+=\
  set statusline+=%*
  set statusline+=%=
  set statusline+=%#Comment#
  set statusline+=%{v:register}
  set statusline+=\
  set statusline+=%#Statement#
  set statusline+=[U+\%04B]
  set statusline+=\ \|\
  set statusline+=%#Comment#
  set statusline+=line\ %5l/%L\
  set statusline+=●\ %02p%%,\
  set statusline+=col\ %3v
endif
